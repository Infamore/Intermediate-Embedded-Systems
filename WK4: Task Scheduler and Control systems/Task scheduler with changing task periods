#include <stdio.h>


void TimerISR();

// BEGIN Items to mimick RIMS. Don't modify this code. 

unsigned short A7,A6,A5,A4,A3,A2,A1,A0; // Note: Setting or reading A or B as a group, as in B = 0, isn't supported
unsigned short B7,B6,B5,B4,B3,B2,B1,B0;
char inputValues[100][8]; // Inputs A7..A0 for up to 100 ticks.
int currTick = 0;

void SetAInputs() {
   A0 = (inputValues[currTick][7] == '0') ? 0 : 1;
   A1 = (inputValues[currTick][6] == '0') ? 0 : 1;
   A2 = (inputValues[currTick][5] == '0') ? 0 : 1;
   A3 = (inputValues[currTick][4] == '0') ? 0 : 1;
   A4 = (inputValues[currTick][3] == '0') ? 0 : 1;
   A5 = (inputValues[currTick][2] == '0') ? 0 : 1;
   A6 = (inputValues[currTick][1] == '0') ? 0 : 1;
   A7 = (inputValues[currTick][0] == '0') ? 0 : 1;
}

void InitializeOutputs() {
   // B = 0 itself doesn't work, so assign all bits individually
   B7 = 0; B6 = 0; B5 = 0; B4 = 0;
   B3 = 0; B2 = 0; B1 = 0; B0 = 0;
}

void TimerTick() {
   printf("%d: %d%d%d%d%d%d%d%d\n",currTick, B7,B6,B5,B4,B3,B2,B1,B0);
   currTick += 1;
   SetAInputs();
   TimerISR();
}

// END Items to mimick RIMS


// task struct used by the task scheduler.
typedef struct task {
  int state; // Current state of the task
  unsigned long period; // Rate at which the task should tick
  unsigned long elapsedTime; // Time since task's previous tick
  int (*TickFct)(int); // Function to call for task's tick
} task;

task tasks[4];



// Tasks parameters; don't modify this code 
const unsigned char tasksNum = 4;
const unsigned long tasksPeriodGCD = 100;
const unsigned long periodBlinkLED = 300;
const unsigned long periodThreeLEDs = 200;
const unsigned long periodCtrLED = 100;
const unsigned long periodChangeTaskPeriod = 100;

// Task scheduler code.
void TimerISR() {
  unsigned char i;
  for (i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
     if ( (tasks[i].elapsedTime >= (tasks[i].period) )) { // Ready
        tasks[i].state = tasks[i].TickFct(tasks[i].state);
        tasks[i].elapsedTime = 0;
     }
     tasks[i].elapsedTime += tasksPeriodGCD;
  }
}

enum BL_States { BL_SMStart, BL_s1 };
int TickFct_BlinkLED(int state);

enum TL_States { TL_SMStart, TL_s1, TL_s2, TL_s3 };
int TickFct_ThreeLEDs(int state);

enum CL_States { CL_SMStart, CL_s1, CL_s2, CL_s3, CL_s4 };
int TickFct_CtrLED(int state);

enum CTP_States { CTP_SMStart, CTP_s1, CTP_s2, CTP_s3, CTP_s4 }; // TODO: add or remove states as needed
int TickFct_ChangeTaskPeriod(int state);

// State transition functions for the tasks; don't modify this code 
int TickFct_BlinkLED(int state) {
  switch(state) { // Transitions
     case BL_SMStart: // Initial transition
        B0 = 0; // Initialization behavior
        state = BL_s1;
        break;
     case BL_s1:
        state = BL_s1;
        break;
     default:
        state = BL_SMStart;
   } // Transitions

  switch(state) { // State actions
     case BL_s1:
        B0 = !B0;
        break;
     default:
        break;
  } // State actions
  return state;
}

int TickFct_ThreeLEDs(int state) {
  switch(state) { // Transitions
     case TL_SMStart: // Initial transition
        state = TL_s1;
        break;
     case TL_s1:
        state = TL_s2;
        break;
     case TL_s2:
        state = TL_s3;
        break;
     case TL_s3:
        state = TL_s1;
        break;
     default:
        state = TL_SMStart;
   } // Transitions

  switch(state) { // State actions
     case TL_s1:
        B2 = 1; B3 = 0; B4 = 0;
        break;
     case TL_s2:
        B2 = 0; B3 = 1; B4 = 0;
        break;
     case TL_s3:
        B2 = 0; B3 = 0; B4 = 1;
        break;
     default:
        break;
  } // State actions
  return state;
}


int TickFct_CtrLED(int state) {
  switch(state) { // Transitions
     case CL_SMStart: // Initial transition
        state = CL_s1;
        break;
     case CL_s1:
        state = CL_s2;
        break;
     case CL_s2:
        state = CL_s3;
        break;
     case CL_s3:
        state = CL_s4;
        break;
     case CL_s4:
        state = CL_s1;
        break;
     default:
        state = CL_SMStart;
   } // Transitions

  switch(state) { // State actions
     case CL_s1:
        B7 = 0; B6 = 0;
        break;
     case CL_s2:
        B7 = 0; B6 = 1;
        break;
     case CL_s3:
        B7 = 1; B6 = 0;
        break;
      case CL_s4:
        B7 = 1; B6 = 1;
        break;  
     default:
        break;
  } // State actions
  return state;
}

int TickFct_ChangeTaskPeriod(int state)
{
   //TODO: complete this function to change the periods of the tasks
   // if A0 is set it doubles the period of task 0 otherwise task 0 will use it's default period of 300ms
   // if A1 is set it doubles the period of task 1 otherwise task 1 will use it's default period of 200ms
   // if A2 is set it doubles the period of task 2 otherwise task 2 will use it's default period of 100ms
  switch(state) { // Transitions
     case CTP_SMStart: // Initial transition
        state = CTP_s1;
        break;
     case CTP_s1:
     
        break;
     default:
        state = CTP_SMStart;
   } // Transitions

  switch(state) { // State actions
     case CTP_s1:
         if (A0 == 1)
            tasks[0].period = 600;
         else
            tasks[0].period = 300;
         
         if (A1 == 1)
            tasks[1].period = 400;
         else
            tasks[1].period = 200;
         
         if (A2 == 1)
            tasks[2].period = 200;
         else
            tasks[2].period = 100;
         
        break;
     default:
        break;
  } // State actions
  return state;
}

int main() {
   // The items below mimick RIMS by pre-reading all input vectors; don't modify this code 
   int numInputVectors; 
   scanf("%d", &numInputVectors); // Reads input test vectors

   for (int i = 0; i < numInputVectors; ++i) {
      scanf("%s", inputValues[i]);
   }

   SetAInputs(); // Set initial values for input A
   InitializeOutputs();

   unsigned char i=0;
   tasks[i].state = BL_SMStart;
   tasks[i].period = periodBlinkLED;
   tasks[i].elapsedTime = tasks[i].period;
   tasks[i].TickFct = &TickFct_BlinkLED;

   ++i;
   tasks[i].state = TL_SMStart;
   tasks[i].period = periodThreeLEDs;
   tasks[i].elapsedTime = tasks[i].period;
   tasks[i].TickFct = &TickFct_ThreeLEDs;

   ++i;
   tasks[i].state = CL_SMStart;
   tasks[i].period = periodCtrLED;
   tasks[i].elapsedTime = tasks[i].period;
   tasks[i].TickFct = &TickFct_CtrLED;

   ++i;
   tasks[i].state = CTP_SMStart;
   tasks[i].period = periodChangeTaskPeriod;
   tasks[i].elapsedTime = tasks[i].period;
   tasks[i].TickFct = &TickFct_ChangeTaskPeriod;

   while (currTick < numInputVectors) 
      TimerTick(); // This function prints all B output values and updates a global tick variable and calls the timer ISR
   
   return 0;
}
