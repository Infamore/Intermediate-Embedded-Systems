#include "RIMS.h"


//Esa Soudbakhsh
//esoud001@ucr.edu
//gdoc summary: https://docs.google.com/document/d/1A6WyjzzboZHK3WaJ7AgrA7E5zvyQ2rEMnBojz7RsLKc/edit
//video summary: https://www.youtube.com/watch?v=Hv0wKg5-70g

volatile unsigned char TimerFlag = 0;

void TimerISR() {
   TimerFlag = 1;
}

// BEGIN Items to mimick RIMS. Don't modify this code. 

//unsigned short A7,A6,A5,A4,A3,A2,A1,A0; // Note: Setting or reading A or B as a group, as in B = 0, isn't supported
//unsigned short B7,B6,B5,B4,B3,B2,B1,B0;
char inputValues[100][8]; // Inputs A7..A0 for up to 100 ticks.
int currTick = 0;

void SetAInputs() {
   A0 = (inputValues[currTick][7] == '0') ? 0 : 1;
   A1 = (inputValues[currTick][6] == '0') ? 0 : 1;
   A2 = (inputValues[currTick][5] == '0') ? 0 : 1;
   A3 = (inputValues[currTick][4] == '0') ? 0 : 1;
   A4 = (inputValues[currTick][3] == '0') ? 0 : 1;
   A5 = (inputValues[currTick][2] == '0') ? 0 : 1;
   A6 = (inputValues[currTick][1] == '0') ? 0 : 1;
   A7 = (inputValues[currTick][0] == '0') ? 0 : 1;
}

void InitializeOutputs() {
   // B = 0 itself doesn't work, so assign all bits individually
   B7 = 0; B6 = 0; B5 = 0; B4 = 0;
   B3 = 0; B2 = 0; B1 = 0; B0 = 0;
}
//may not need timertick here
void TimerTick() {
   printf("%d: %d%d%d%d%d%d%d%d\n",currTick, B7,B6,B5,B4,B3,B2,B1,B0);
   currTick += 1;
   SetAInputs();
   TimerISR();
}

// END Items to mimick RIMS


// Tasks parameters; don't modify this code 
const unsigned char tasksNum = 3;
const unsigned long tasksPeriodGCD = 400;
const unsigned long periodbutton = 400;
const unsigned long periodtimer = 4000;
const unsigned long periodmode = 400;
//const unsigned long periodChangeTaskPeriod = 100;

//global variables
int A_input;



//buttons for which water output. Once button pressed it goes until cycle is over
enum button_States { button_Start, A1_on, A2_on, A3_on, A4_on, A5_on } b_state;

//timer for how long each water mode depending on button
enum time_States { time_SMStart, cycle1, cycle2, cycle3, cycle4 } t_state;

//B output for each sprinkler output
enum mode_States { mode_SMStart, B1_on, B2_on, B3_on, B4_on } m_state;


// State transition functions for the tasks; don't modify this code 
void TickFct_Buttons () {
  switch(b_state) { // Transitions
     case button_Start:
         A_input = 0;
         if (A1 == 1)
         {
            b_state = A1_on;
         }
         
         else if (A2 == 1)
         {
            b_state = A2_on;
         }
         
         else if (A3 == 1)
         {
            b_state = A3_on;
         }
         
         else if (A4 == 1)
         {
            b_state = A4_on;
         }
         
         else if (A5 == 1)
         {
            b_state = A5_on;  
         }
     break;
     
     case A1_on:
         if (A1 == 1)
         {
            b_state = A1_on;
         }
         
         else if (A2 == 1)
         {
            b_state = A2_on;
         }
         
         else if (A3 == 1)
         {
            b_state = A3_on;
         }
         
         else if (A4 == 1)
         {
            b_state = A4_on;
         }
         
         else if (A5 == 1)
         {
            b_state = A5_on;  
         }
     break;
     
     case A2_on:
         if (A1 == 1)
         {
            b_state = A1_on;
         }
         
         else if (A2 == 1)
         {
            b_state = A2_on;
         }
         
         else if (A3 == 1)
         {
            b_state = A3_on;
         }
         
         else if (A4 == 1)
         {
            b_state = A4_on;
         }
         
         else if (A5 == 1)
         {
            b_state = A5_on;  
         }
     break;
     
     case A3_on:
         if (A1 == 1)
         {
            b_state = A1_on;
         }
         
         else if (A2 == 1)
         {
            b_state = A2_on;
         }
         
         else if (A3 == 1)
         {
            b_state = A3_on;
         }
         
         else if (A4 == 1)
         {
            b_state = A4_on;
         }
         
         else if (A5 == 1)
         {
            b_state = A5_on;  
         }
     break;
     
     case A4_on:
         if (A1 == 1)
         {
            b_state = A1_on;
         }
         
         else if (A2 == 1)
         {
            b_state = A2_on;
         }
         
         else if (A3 == 1)
         {
            b_state = A3_on;
         }
         
         else if (A4 == 1)
         {
            b_state = A4_on;
         }
         
         else if (A5 == 1)
         {
            b_state = A5_on;  
         }
     break;
     
     case A5_on:
         if (A1 == 1)
         {
            b_state = A1_on;
         }
         
         else if (A2 == 1)
         {
            b_state = A2_on;
         }
         
         else if (A3 == 1)
         {
            b_state = A3_on;
         }
         
         else if (A4 == 1)
         {
            b_state = A4_on;
         }
         
         else if (A5 == 1)
         {
            b_state = A5_on;  
         }
     break;
     
     default:
     
     break;
   } // Transitions

  switch(b_state) { // State actions
     case button_Start:
         A_input = 0;
     break;
     
     case A1_on:
         A_input = 1;
     break;
     
     case A2_on:
         A_input = 2;
     break;
     
     case A3_on:
         A_input = 3;
     break;
     
     case A4_on:
         A_input = 4;
     break;
     
     case A5_on:
         A_input = 5;
     break;
     
     default:
     
     break;
     
  } // State actions

}

void TickFct_timer() { 
  switch(t_state) { // Transitions
      case time_SMStart:
         t_state = cycle1;
      break;
      
      case cycle1:
         t_state = cycle2;
      break;
      
      case cycle2:
         t_state = cycle3;
      break;
      
      case cycle3:
         t_state = cycle4;
      break;
      
      case cycle4:
         t_state = time_SMStart;
      break;
   } // Transitions

  switch(t_state) { // State actions
      case time_SMStart:
      
      break;
      
      case cycle1:
      
      break;
      
      case cycle2:
      
      break;
      
      case cycle3:
      
      break;
      
      case cycle4:
            if (A_input == 1)
               B1 = 1;
         else if(A_input == 2)
               B2 = 1;
         else if(A_input == 3)
               B3 = 1;
         else if(A_input == 4)
               B4 = 1;
         else if (A_input == 5)
         {
            B0 = 0; B1 = 0; B2 = 0; B3 = 0; B4 = 0;  
         }
               
      break;
   
  } // State actions

}


int TickFct_modes(int state) {
  switch(state) { // Transitions
      case mode_SMStart:
         if (A_input == 1)
            state = B1_on;
         else if(A_input == 2)
            state = B2_on;
         else if(A_input == 3)
            state = B3_on;
         else if(A_input == 4)
            state = B4_on;
         else if(A_input == 0)
            state = mode_SMStart;
      break;
      
      case B1_on:
         if (A_input == 1)
            state = B1_on;
         else if(A_input == 2)
            state = B2_on;
         else if(A_input == 3)
            state = B3_on;
         else if(A_input == 4)
            state = B4_on;
         else if(A_input == 0)
            state = mode_SMStart;
      break;
      
      case B2_on:
         if (A_input == 1)
            state = B1_on;
         else if(A_input == 2)
            state = B2_on;
         else if(A_input == 3)
            state = B3_on;
         else if(A_input == 4)
            state = B4_on;
         else if(A_input == 0)
            state = mode_SMStart;
      break;
      
      case B3_on:
         if (A_input == 1)
            state = B1_on;
         else if(A_input == 2)
            state = B2_on;
         else if(A_input == 3)
            state = B3_on;
         else if(A_input == 4)
            state = B4_on;
         else if(A_input == 0)
            state = mode_SMStart;
      break;
      
      case B4_on:
         if (A_input == 1)
            state = B1_on;
         else if(A_input == 2)
            state = B2_on;
         else if(A_input == 3)
            state = B3_on;
         else if(A_input == 4)
            state = B4_on;
         else if(A_input == 0)
            state = mode_SMStart;
      break;
      
      default:
      
      break;
   } // Transitions

  switch(state) { // State actions
      case mode_SMStart:
        // B1 = 0; B2 = 0; B3 = 0; B4 = 0;
      break;
      
      case B1_on:
           printf("B1 is on");
      break;
      
      case B2_on:
           printf("B2 is on");
      break;
      
      case B3_on:
           printf("B3 is on");
      break;
      
      case B4_on:
           printf("B4 is on");
      break;
      
      default:
      
      break;
      
  } // State actions
 
}

int main() {
   
   unsigned long buttonelapsedtime = 400;
   unsigned long timeelapsedtime = 400;
   unsigned long modeelapsedtime = 400;

   b_state = button_Start;
   t_state = time_SMStart;
   m_state = mode_SMStart;
   
   while (1) 
   {
      
   
   if (buttonelapsedtime >= periodbutton) {
        TickFct_Buttons();
        buttonelapsedtime = 0;
   }
   
   if (timeelapsedtime >= periodtimer) {
        TickFct_timer();
        timeelapsedtime = 0;
   }
   
   if (modeelapsedtime >= periodmode) {
        m_state = TickFct_modes(m_state);
        modeelapsedtime = 0;
   }
   
   
      buttonelapsedtime += tasksPeriodGCD;
      timeelapsedtime += tasksPeriodGCD;
      modeelapsedtime += tasksPeriodGCD;
   }
   return 0;
}

