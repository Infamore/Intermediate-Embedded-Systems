#include "RIMS.h"
volatile int TimerFlag = 0;
void TimerISR() {
   TimerFlag = 1;
}

enum control_states = { start, PID_calculate} controller;
//the actuator is just the "printf" or the energy of the plant that we get

//int tmp B0 = 0, tmpB1 = 0, tmpB2 = 0, tmpB3 = 0, tmpB4 = 0, tmpB5 = 0, tmpB6 = 0, tmpB7 = 0;
unsigned int tmpB = 0; //tmpB is initially zero
int integral = 0;
int derivative = 0; 
int error = 0;
int actuator = 0;

void calculate_error() {
   unsigned int desired = A & 0x0F;

   unsigned int actual = (A >> 4);

   unsigned int error = desired - actual;   
}

void calculate_integral() {
   integral = integral + error;
}

void calculate_derivative() {
   derivative = B - tmpB;   
      
   tmpB = B & 0xFF;   
   //saves the current to tmp so that it becomes the "previous value" for the next cycle
}

void calculate_actuator() {
     actuator = (0.05*error) + (0.001*integral) - (2.5*derivative); 
}

void task()
{
   switch (controller) //transitions
   {
        case start:
            controller = PID_calculate;
        break;
        
        case PID_calculate:
            if (A3 == A7 && A2 == A6 && A1 == A5 && A0 == A4)
               controller = PID_calculate;
            else
               controller = PID_calculate;
        break;
        
        default:
        
        break;
        
   }
   
   switch (controller) //output
   {
         case start:
            //do nothing
     
         break;
         
         case PID_calculate:
              calculate_error();
              calculate_integral();
              calculate_derivative();
              calculate_actuator();
         break;
         
         default:
         
         break;
   }
   
}


int main(){
   
   TimerSet(1000);
   TimerOn();
   while(1){
      B0 = !B0; // Delete this of course. Call your PID tick function instead. 
      
      while(!TimerFlag);
      TimerFlag=0;
   }
}
